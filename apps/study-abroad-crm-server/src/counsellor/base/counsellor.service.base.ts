/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Counsellor as PrismaCounsellor } from "@prisma/client";

export class CounsellorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CounsellorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.counsellor.count(args);
  }

  async counsellors<T extends Prisma.CounsellorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounsellorFindManyArgs>
  ): Promise<PrismaCounsellor[]> {
    return this.prisma.counsellor.findMany<Prisma.CounsellorFindManyArgs>(args);
  }
  async counsellor<T extends Prisma.CounsellorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounsellorFindUniqueArgs>
  ): Promise<PrismaCounsellor | null> {
    return this.prisma.counsellor.findUnique(args);
  }
  async createCounsellor<T extends Prisma.CounsellorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounsellorCreateArgs>
  ): Promise<PrismaCounsellor> {
    return this.prisma.counsellor.create<T>(args);
  }
  async updateCounsellor<T extends Prisma.CounsellorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounsellorUpdateArgs>
  ): Promise<PrismaCounsellor> {
    return this.prisma.counsellor.update<T>(args);
  }
  async deleteCounsellor<T extends Prisma.CounsellorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounsellorDeleteArgs>
  ): Promise<PrismaCounsellor> {
    return this.prisma.counsellor.delete(args);
  }
}
