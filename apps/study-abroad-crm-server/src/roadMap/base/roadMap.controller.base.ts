/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RoadMapService } from "../roadMap.service";
import { RoadMapCreateInput } from "./RoadMapCreateInput";
import { RoadMap } from "./RoadMap";
import { RoadMapFindManyArgs } from "./RoadMapFindManyArgs";
import { RoadMapWhereUniqueInput } from "./RoadMapWhereUniqueInput";
import { RoadMapUpdateInput } from "./RoadMapUpdateInput";
import { UniversityFindManyArgs } from "../../university/base/UniversityFindManyArgs";
import { University } from "../../university/base/University";
import { UniversityWhereUniqueInput } from "../../university/base/UniversityWhereUniqueInput";

export class RoadMapControllerBase {
  constructor(protected readonly service: RoadMapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RoadMap })
  async createRoadMap(
    @common.Body() data: RoadMapCreateInput
  ): Promise<RoadMap> {
    return await this.service.createRoadMap({
      data: {
        ...data,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RoadMap] })
  @ApiNestedQuery(RoadMapFindManyArgs)
  async roadMaps(@common.Req() request: Request): Promise<RoadMap[]> {
    const args = plainToClass(RoadMapFindManyArgs, request.query);
    return this.service.roadMaps({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RoadMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async roadMap(
    @common.Param() params: RoadMapWhereUniqueInput
  ): Promise<RoadMap | null> {
    const result = await this.service.roadMap({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RoadMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoadMap(
    @common.Param() params: RoadMapWhereUniqueInput,
    @common.Body() data: RoadMapUpdateInput
  ): Promise<RoadMap | null> {
    try {
      return await this.service.updateRoadMap({
        where: params,
        data: {
          ...data,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RoadMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoadMap(
    @common.Param() params: RoadMapWhereUniqueInput
  ): Promise<RoadMap | null> {
    try {
      return await this.service.deleteRoadMap({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/universities")
  @ApiNestedQuery(UniversityFindManyArgs)
  async findUniversities(
    @common.Req() request: Request,
    @common.Param() params: RoadMapWhereUniqueInput
  ): Promise<University[]> {
    const query = plainToClass(UniversityFindManyArgs, request.query);
    const results = await this.service.findUniversities(params.id, {
      ...query,
      select: {
        coursesOffered: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,

        roadMap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/universities")
  async connectUniversities(
    @common.Param() params: RoadMapWhereUniqueInput,
    @common.Body() body: UniversityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      universities: {
        connect: body,
      },
    };
    await this.service.updateRoadMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/universities")
  async updateUniversities(
    @common.Param() params: RoadMapWhereUniqueInput,
    @common.Body() body: UniversityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      universities: {
        set: body,
      },
    };
    await this.service.updateRoadMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/universities")
  async disconnectUniversities(
    @common.Param() params: RoadMapWhereUniqueInput,
    @common.Body() body: UniversityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      universities: {
        disconnect: body,
      },
    };
    await this.service.updateRoadMap({
      where: params,
      data,
      select: { id: true },
    });
  }
}
