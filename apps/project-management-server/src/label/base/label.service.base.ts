/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Label as PrismaLabel } from "@prisma/client";

export class LabelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LabelCountArgs, "select">): Promise<number> {
    return this.prisma.label.count(args);
  }

  async labels<T extends Prisma.LabelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabelFindManyArgs>
  ): Promise<PrismaLabel[]> {
    return this.prisma.label.findMany<Prisma.LabelFindManyArgs>(args);
  }
  async label<T extends Prisma.LabelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabelFindUniqueArgs>
  ): Promise<PrismaLabel | null> {
    return this.prisma.label.findUnique(args);
  }
  async createLabel<T extends Prisma.LabelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabelCreateArgs>
  ): Promise<PrismaLabel> {
    return this.prisma.label.create<T>(args);
  }
  async updateLabel<T extends Prisma.LabelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabelUpdateArgs>
  ): Promise<PrismaLabel> {
    return this.prisma.label.update<T>(args);
  }
  async deleteLabel<T extends Prisma.LabelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabelDeleteArgs>
  ): Promise<PrismaLabel> {
    return this.prisma.label.delete(args);
  }
}
