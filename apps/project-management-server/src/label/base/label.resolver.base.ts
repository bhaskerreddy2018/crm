/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Label } from "./Label";
import { LabelCountArgs } from "./LabelCountArgs";
import { LabelFindManyArgs } from "./LabelFindManyArgs";
import { LabelFindUniqueArgs } from "./LabelFindUniqueArgs";
import { CreateLabelArgs } from "./CreateLabelArgs";
import { UpdateLabelArgs } from "./UpdateLabelArgs";
import { DeleteLabelArgs } from "./DeleteLabelArgs";
import { LabelService } from "../label.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Label)
export class LabelResolverBase {
  constructor(
    protected readonly service: LabelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Label",
    action: "read",
    possession: "any",
  })
  async _labelsMeta(
    @graphql.Args() args: LabelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Label])
  @nestAccessControl.UseRoles({
    resource: "Label",
    action: "read",
    possession: "any",
  })
  async labels(@graphql.Args() args: LabelFindManyArgs): Promise<Label[]> {
    return this.service.labels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Label, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Label",
    action: "read",
    possession: "own",
  })
  async label(
    @graphql.Args() args: LabelFindUniqueArgs
  ): Promise<Label | null> {
    const result = await this.service.label(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Label)
  @nestAccessControl.UseRoles({
    resource: "Label",
    action: "create",
    possession: "any",
  })
  async createLabel(@graphql.Args() args: CreateLabelArgs): Promise<Label> {
    return await this.service.createLabel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Label)
  @nestAccessControl.UseRoles({
    resource: "Label",
    action: "update",
    possession: "any",
  })
  async updateLabel(
    @graphql.Args() args: UpdateLabelArgs
  ): Promise<Label | null> {
    try {
      return await this.service.updateLabel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Label)
  @nestAccessControl.UseRoles({
    resource: "Label",
    action: "delete",
    possession: "any",
  })
  async deleteLabel(
    @graphql.Args() args: DeleteLabelArgs
  ): Promise<Label | null> {
    try {
      return await this.service.deleteLabel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
