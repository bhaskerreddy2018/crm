/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Issue as PrismaIssue,
  Comment as PrismaComment,
} from "@prisma/client";
import { CreateIssueInput } from "../CreateIssueInput";

export class IssueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IssueCountArgs, "select">): Promise<number> {
    return this.prisma.issue.count(args);
  }

  async issues<T extends Prisma.IssueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IssueFindManyArgs>
  ): Promise<PrismaIssue[]> {
    return this.prisma.issue.findMany<Prisma.IssueFindManyArgs>(args);
  }
  async issue<T extends Prisma.IssueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IssueFindUniqueArgs>
  ): Promise<PrismaIssue | null> {
    return this.prisma.issue.findUnique(args);
  }
  async createIssue<T extends Prisma.IssueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IssueCreateArgs>
  ): Promise<PrismaIssue> {
    return this.prisma.issue.create<T>(args);
  }
  async updateIssue<T extends Prisma.IssueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IssueUpdateArgs>
  ): Promise<PrismaIssue> {
    return this.prisma.issue.update<T>(args);
  }
  async deleteIssue<T extends Prisma.IssueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IssueDeleteArgs>
  ): Promise<PrismaIssue> {
    return this.prisma.issue.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.issue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }
  async AddNewIssue(args: CreateIssueInput): Promise<CreateIssueInput> {
    throw new Error("Not implemented");
  }
  async UpdateIssueStatus(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
