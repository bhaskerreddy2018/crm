/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Counsellor } from "./Counsellor";
import { CounsellorCountArgs } from "./CounsellorCountArgs";
import { CounsellorFindManyArgs } from "./CounsellorFindManyArgs";
import { CounsellorFindUniqueArgs } from "./CounsellorFindUniqueArgs";
import { CreateCounsellorArgs } from "./CreateCounsellorArgs";
import { UpdateCounsellorArgs } from "./UpdateCounsellorArgs";
import { DeleteCounsellorArgs } from "./DeleteCounsellorArgs";
import { CounsellorService } from "../counsellor.service";
@graphql.Resolver(() => Counsellor)
export class CounsellorResolverBase {
  constructor(protected readonly service: CounsellorService) {}

  async _counsellorsMeta(
    @graphql.Args() args: CounsellorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Counsellor])
  async counsellors(
    @graphql.Args() args: CounsellorFindManyArgs
  ): Promise<Counsellor[]> {
    return this.service.counsellors(args);
  }

  @graphql.Query(() => Counsellor, { nullable: true })
  async counsellor(
    @graphql.Args() args: CounsellorFindUniqueArgs
  ): Promise<Counsellor | null> {
    const result = await this.service.counsellor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Counsellor)
  async createCounsellor(
    @graphql.Args() args: CreateCounsellorArgs
  ): Promise<Counsellor> {
    return await this.service.createCounsellor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Counsellor)
  async updateCounsellor(
    @graphql.Args() args: UpdateCounsellorArgs
  ): Promise<Counsellor | null> {
    try {
      return await this.service.updateCounsellor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Counsellor)
  async deleteCounsellor(
    @graphql.Args() args: DeleteCounsellorArgs
  ): Promise<Counsellor | null> {
    try {
      return await this.service.deleteCounsellor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
