/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  University as PrismaUniversity,
  Application as PrismaApplication,
  RoadMap as PrismaRoadMap,
} from "@prisma/client";

export class UniversityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UniversityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.university.count(args);
  }

  async universities<T extends Prisma.UniversityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UniversityFindManyArgs>
  ): Promise<PrismaUniversity[]> {
    return this.prisma.university.findMany<Prisma.UniversityFindManyArgs>(args);
  }
  async university<T extends Prisma.UniversityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UniversityFindUniqueArgs>
  ): Promise<PrismaUniversity | null> {
    return this.prisma.university.findUnique(args);
  }
  async createUniversity<T extends Prisma.UniversityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UniversityCreateArgs>
  ): Promise<PrismaUniversity> {
    return this.prisma.university.create<T>(args);
  }
  async updateUniversity<T extends Prisma.UniversityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UniversityUpdateArgs>
  ): Promise<PrismaUniversity> {
    return this.prisma.university.update<T>(args);
  }
  async deleteUniversity<T extends Prisma.UniversityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UniversityDeleteArgs>
  ): Promise<PrismaUniversity> {
    return this.prisma.university.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.university
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async getRoadMap(parentId: string): Promise<PrismaRoadMap | null> {
    return this.prisma.university
      .findUnique({
        where: { id: parentId },
      })
      .roadMap();
  }
}
