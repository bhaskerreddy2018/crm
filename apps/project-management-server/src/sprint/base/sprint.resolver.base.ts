/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Sprint } from "./Sprint";
import { SprintCountArgs } from "./SprintCountArgs";
import { SprintFindManyArgs } from "./SprintFindManyArgs";
import { SprintFindUniqueArgs } from "./SprintFindUniqueArgs";
import { CreateSprintArgs } from "./CreateSprintArgs";
import { UpdateSprintArgs } from "./UpdateSprintArgs";
import { DeleteSprintArgs } from "./DeleteSprintArgs";
import { SprintService } from "../sprint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sprint)
export class SprintResolverBase {
  constructor(
    protected readonly service: SprintService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sprint",
    action: "read",
    possession: "any",
  })
  async _sprintsMeta(
    @graphql.Args() args: SprintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sprint])
  @nestAccessControl.UseRoles({
    resource: "Sprint",
    action: "read",
    possession: "any",
  })
  async sprints(@graphql.Args() args: SprintFindManyArgs): Promise<Sprint[]> {
    return this.service.sprints(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sprint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sprint",
    action: "read",
    possession: "own",
  })
  async sprint(
    @graphql.Args() args: SprintFindUniqueArgs
  ): Promise<Sprint | null> {
    const result = await this.service.sprint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sprint)
  @nestAccessControl.UseRoles({
    resource: "Sprint",
    action: "create",
    possession: "any",
  })
  async createSprint(@graphql.Args() args: CreateSprintArgs): Promise<Sprint> {
    return await this.service.createSprint({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sprint)
  @nestAccessControl.UseRoles({
    resource: "Sprint",
    action: "update",
    possession: "any",
  })
  async updateSprint(
    @graphql.Args() args: UpdateSprintArgs
  ): Promise<Sprint | null> {
    try {
      return await this.service.updateSprint({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sprint)
  @nestAccessControl.UseRoles({
    resource: "Sprint",
    action: "delete",
    possession: "any",
  })
  async deleteSprint(
    @graphql.Args() args: DeleteSprintArgs
  ): Promise<Sprint | null> {
    try {
      return await this.service.deleteSprint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
