/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UniversityService } from "../university.service";
import { UniversityCreateInput } from "./UniversityCreateInput";
import { University } from "./University";
import { UniversityFindManyArgs } from "./UniversityFindManyArgs";
import { UniversityWhereUniqueInput } from "./UniversityWhereUniqueInput";
import { UniversityUpdateInput } from "./UniversityUpdateInput";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";

export class UniversityControllerBase {
  constructor(protected readonly service: UniversityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: University })
  async createUniversity(
    @common.Body() data: UniversityCreateInput
  ): Promise<University> {
    return await this.service.createUniversity({
      data: {
        ...data,

        roadMap: data.roadMap
          ? {
              connect: data.roadMap,
            }
          : undefined,
      },
      select: {
        coursesOffered: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,

        roadMap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [University] })
  @ApiNestedQuery(UniversityFindManyArgs)
  async universities(@common.Req() request: Request): Promise<University[]> {
    const args = plainToClass(UniversityFindManyArgs, request.query);
    return this.service.universities({
      ...args,
      select: {
        coursesOffered: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,

        roadMap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: University })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async university(
    @common.Param() params: UniversityWhereUniqueInput
  ): Promise<University | null> {
    const result = await this.service.university({
      where: params,
      select: {
        coursesOffered: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,

        roadMap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: University })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUniversity(
    @common.Param() params: UniversityWhereUniqueInput,
    @common.Body() data: UniversityUpdateInput
  ): Promise<University | null> {
    try {
      return await this.service.updateUniversity({
        where: params,
        data: {
          ...data,

          roadMap: data.roadMap
            ? {
                connect: data.roadMap,
              }
            : undefined,
        },
        select: {
          coursesOffered: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,

          roadMap: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: University })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUniversity(
    @common.Param() params: UniversityWhereUniqueInput
  ): Promise<University | null> {
    try {
      return await this.service.deleteUniversity({
        where: params,
        select: {
          coursesOffered: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,

          roadMap: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/applications")
  @ApiNestedQuery(ApplicationFindManyArgs)
  async findApplications(
    @common.Req() request: Request,
    @common.Param() params: UniversityWhereUniqueInput
  ): Promise<Application[]> {
    const query = plainToClass(ApplicationFindManyArgs, request.query);
    const results = await this.service.findApplications(params.id, {
      ...query,
      select: {
        createdAt: true,
        eligibleUniversities: true,
        id: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        university: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applications")
  async connectApplications(
    @common.Param() params: UniversityWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        connect: body,
      },
    };
    await this.service.updateUniversity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applications")
  async updateApplications(
    @common.Param() params: UniversityWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        set: body,
      },
    };
    await this.service.updateUniversity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applications")
  async disconnectApplications(
    @common.Param() params: UniversityWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        disconnect: body,
      },
    };
    await this.service.updateUniversity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
